name: CI

on:
  push:
  pull_request:

jobs:
  # ───────────────────────── Build Dependencies & Packages ─────────────────────────
  build:
    runs-on: ['self-hosted', 'linux']
    steps:
      - uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'

      - name: Install native build tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential python3 python3-dev
          sudo apt-get install -y pkg-config libsqlite3-dev

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          npm_config_build_from_source: true
          SQLITE3_FORCE_COMPILE: true

      - name: Build all packages
        run: pnpm build

      - name: Upload built workspace
        uses: actions/upload-artifact@v4
        with:
          name: built-workspace-${{ github.sha }}
          path: .
          exclude: |
            node_modules/
            **/node_modules/
            .pnpm-store/

  # ───────────────────────── Lint Checks ─────────────────────────
  lint:
    needs: build
    runs-on: ['self-hosted', 'linux']
    steps:
      - uses: actions/checkout@v4

      - name: Download built workspace
        uses: actions/download-artifact@v4
        with:
          name: built-workspace-${{ github.sha }}
          path: .

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint checks
        run: |
          pnpm -r lint
          pnpm lint:data
          pnpm audit --audit-level moderate
          pnpm deps:check

  # ───────────────────────── Unit Tests ─────────────────────────
  test:
    needs: build
    runs-on: ['self-hosted', 'linux']
    steps:
      - uses: actions/checkout@v4

      - name: Download built workspace
        uses: actions/download-artifact@v4
        with:
          name: built-workspace-${{ github.sha }}
          path: .

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm -r test

  # ───────────────────────── Docker smoke test ────────────────────────────
  docker-smoke-test:
    needs: [build, lint, test]
    runs-on: ['self-hosted', 'linux']
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Clean up any existing containers
        run: |
          containers=$(docker ps -a --filter "name=promptlab" --format "{{.ID}}")
          if [ -n "$containers" ]; then
            echo "Removing existing containers: $containers"
            docker rm -f $containers
          else
            echo "No existing containers to remove"
          fi

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: promptlab:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start container
        run: docker run -d --name promptlab -p 3000:3000 -e OPENAI_API_KEY=dummy-key-for-ci -e NODE_ENV=test promptlab:test

      - name: Wait for API health check
        run: |
          echo "Waiting for API to become ready..."
          for i in $(seq 1 20); do
            # Check if container is still running
            if ! docker ps --filter name=promptlab --format '{{.Status}}' | grep -q 'Up'; then
              echo "❌ Container exited early"
              echo "Container logs:"
              docker logs promptlab 2>&1 || true
              exit 1
            fi
            
            # Check if API is ready
            if curl -sf http://localhost:3000/health/ready >/dev/null 2>&1; then
              echo "✅ API is ready!"
              exit 0
            fi
            
            echo "⏳ API not ready yet... attempt $i/20"
            sleep 3
          done

          echo "❌ Gave up waiting for API after 60 seconds"
          echo "Final container logs:"
          docker logs promptlab 2>&1 || true
          exit 1

      - name: Clean up containers
        if: always()
        run: |
          containers=$(docker ps -a --filter "name=promptlab" --format "{{.ID}}")
          if [ -n "$containers" ]; then
            echo "Cleaning up containers: $containers"
            docker rm -f $containers
          else
            echo "No containers to clean up"
          fi
