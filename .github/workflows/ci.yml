name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.x'
  PNPM_VERSION: '10'

jobs:
  # Single comprehensive job to minimize runner usage
  ci:
    name: Build, Lint, Type-check & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type checking
        run: pnpm tsc

      - name: Run linting
        run: pnpm lint

      - name: Build all packages
        run: pnpm build

      - name: Run tests with coverage
        run: pnpm test
        env:
          NODE_ENV: test
          OPENAI_API_KEY: dummy-key-for-ci
          GEMINI_API_KEY: dummy-key-for-ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          fail_ci_if_error: false
          verbose: true

  # Docker build only on main branch pushes (cost optimization)
  docker-build:
    name: Docker Build & Smoke Test
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: promptlab:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker smoke test
        run: |
          # Start container in background
          docker run -d --name promptlab-test -p 3000:3000 promptlab:latest

          # Wait for container to be ready
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker logs promptlab-test 2>&1 | grep -q "Server running on"; then
              echo "✅ Container started successfully"
              break
            fi
            sleep 2
            timeout=$((timeout - 2))
          done

          if [ $timeout -eq 0 ]; then
            echo "❌ Container failed to start"
            docker logs promptlab-test
            exit 1
          fi

          # Run smoke tests
          bash scripts/smoke-docker.sh

          # Cleanup
          docker stop promptlab-test
          docker rm promptlab-test
