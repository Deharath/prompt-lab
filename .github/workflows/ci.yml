# Overhauled CI Workflow
#
# This workflow is designed for speed and efficiency.
# Key principles:
# 1. **Maximize Parallelism**: Linting and testing run in parallel.
# 2. **Intelligent Caching**: Uses `actions/cache` for dependencies, avoiding slow artifact passing.
# 3. **Simplified Jobs**: Combines build and test steps into a single `test` job.
# 4. **Maintainability**: Externalizes complex scripts and cancels redundant runs.

name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

# Cancel in-progress runs on the same branch when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ───────────────────────── Lint Checks ─────────────────────────
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint checks
        run: |
          pnpm -r lint
          pnpm lint:data
          pnpm audit --audit-level moderate
          pnpm deps:check

  # ───────────────────────── Unit & Integration Tests ─────────────────────────
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'

      - name: Install native build tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential python3 python3-dev pkg-config libsqlite3-dev

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          npm_config_build_from_source: true
          SQLITE3_FORCE_COMPILE: true

      - name: Build all packages
        run: pnpm build

      - name: Run tests
        run: pnpm -r test

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage/

  # ───────────────────────── Docker Smoke Test ────────────────────────────
  docker-smoke-test:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install net-tools for debugging
        run: sudo apt-get update && sudo apt-get install -y net-tools

      - name: Clean up any existing containers
        run: |
          containers=$(docker ps -a --filter "name=promptlab" --format "{{.ID}}")
          if [ -n "$containers" ]; then
            echo "Removing existing containers: $containers"
            docker rm -f $containers
          fi

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: promptlab:test
          load: true
          cache-from:
            - type=gha,ref=refs/heads/main
          cache-to:
            - type=gha,mode=max

      - name: Start container
        run: |
          docker run -d --name promptlab \
            -p 3000:3000 \
            -e OPENAI_API_KEY=dummy-key-for-ci \
            -e NODE_ENV=test \
            -e HOST=0.0.0.0 \
            promptlab:test

      - name: Wait for API health check
        run: ./scripts/health-check.sh

      - name: Clean up containers
        if: always()
        run: |
          containers=$(docker ps -a --filter "name=promptlab" --format "{{.ID}}")
          if [ -n "$containers" ]; then
            echo "Cleaning up containers: $containers"
            docker rm -f $containers
          fi
