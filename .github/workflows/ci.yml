# Enhanced CI Workflow for PromptLab
#
# This workflow is designed for maximum efficiency, robustness, and parallelism.
# Key principles:
# 1. **Optimal Parallelism**: All independent jobs run in parallel with intelligent dependencies
# 2. **Smart Caching**: Multi-level caching for dependencies, builds, and Docker layers
# 3. **Node Version Consistency**: Single Node version (22.x) across all environments including Docker
# 4. **Fast Feedback**: Critical checks (lint, type-check) run first and fast
# 5. **Robust Error Handling**: Enhanced health checks with retry mechanisms and detailed diagnostics
# 6. **Security**: Proper permission scoping and secret handling

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Cancel in-progress runs on the same branch when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  NODE_VERSION: '22.x'
  PNPM_VERSION: '10'

jobs:
  # ───────────────────────── Setup & Dependencies ─────────────────────────
  setup:
    name: Setup & Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      node-modules-cache-hit: ${{ steps.cache-node-modules.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=node-modules-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            node-modules-${{ env.NODE_VERSION }}-

      - name: Set up pnpm
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install native build tools
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential python3 python3-dev pkg-config libsqlite3-dev

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
        env:
          npm_config_build_from_source: true
          SQLITE3_FORCE_COMPILE: true

  # ───────────────────────── Fast Quality Checks ─────────────────────────
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Run ESLint
        run: pnpm -r lint

      - name: Run TypeScript type checking
        run: pnpm tsc

      - name: Validate data files
        run: pnpm lint:data

      - name: Audit dependencies for security issues
        run: pnpm audit --audit-level moderate

      - name: Check for unused dependencies
        run: pnpm deps:check

  # ───────────────────────── Build All Packages ─────────────────────────
  build:
    name: Build Packages & Apps
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      build-cache-key: ${{ steps.build-cache.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Generate build cache key
        id: build-cache
        run: |
          echo "cache-key=build-${{ env.NODE_VERSION }}-${{ hashFiles('apps/*/src/**/*', 'packages/*/src/**/*', '**/tsconfig*.json') }}" >> $GITHUB_OUTPUT

      - name: Cache build outputs
        id: cache-build
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            packages/*/tsconfig.tsbuildinfo
          key: ${{ steps.build-cache.outputs.cache-key }}
          restore-keys: |
            build-${{ env.NODE_VERSION }}-

      - name: Install native build tools
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential python3 python3-dev pkg-config libsqlite3-dev

      - name: Build all packages
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: pnpm build
        env:
          npm_config_build_from_source: true
          SQLITE3_FORCE_COMPILE: true

  # ───────────────────────── Comprehensive Testing ─────────────────────────
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    strategy:
      matrix:
        test-type: [unit, integration]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            packages/*/tsconfig.tsbuildinfo
          key: ${{ needs.build.outputs.build-cache-key }}
          fail-on-cache-miss: true

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: pnpm test
        env:
          NODE_ENV: test
          CI: true

      - name: Run E2E tests
        if: matrix.test-type == 'integration'
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          CI: true
          OPENAI_API_KEY: dummy-key-for-ci

      - name: Upload coverage reports
        if: matrix.test-type == 'unit' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage/
          retention-days: 7

  # ───────────────────────── Docker Build & Test ─────────────────────────
  docker:
    name: Docker Build & Smoke Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image with caching
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: promptlab:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

      - name: Start container with enhanced health monitoring
        run: |
          # Clean up any existing containers
          docker ps -a --filter "name=promptlab" --format "{{.ID}}" | xargs -r docker rm -f

          # Start container with enhanced logging
          docker run -d --name promptlab \
            -p 3000:3000 \
            -e OPENAI_API_KEY=dummy-key-for-ci \
            -e GEMINI_API_KEY=dummy-key-for-ci \
            -e NODE_ENV=test \
            -e HOST=0.0.0.0 \
            -e CI=true \
            --health-cmd="curl -f http://localhost:3000/health/ready || exit 1" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=6 \
            promptlab:test

      - name: Enhanced health check with retry logic
        run: |
          echo "🔍 Starting enhanced health check..."

          # Function to check container health
          check_container_health() {
            local status=$(docker inspect --format='{{.State.Health.Status}}' promptlab 2>/dev/null || echo "unknown")
            echo "Container health status: $status"
            return $([ "$status" = "healthy" ] && echo 0 || echo 1)
          }

          # Function to check endpoint directly
          check_endpoint() {
            local endpoint=$1
            local timeout=${2:-5}
            curl -sf -m $timeout "http://localhost:3000$endpoint" >/dev/null 2>&1
          }

          # Wait for container to be healthy or manually verify endpoints
          for i in $(seq 1 30); do
            echo "🔄 Health check attempt $i/30..."
            
            # Check if container is still running
            if ! docker ps --filter "name=promptlab" --format "{{.Names}}" | grep -q promptlab; then
              echo "❌ Container stopped unexpectedly"
              echo "📋 Container logs:"
              docker logs promptlab 2>&1 || echo "No logs available"
              exit 1
            fi
            
            # Check Docker health status first
            if check_container_health; then
              echo "✅ Container reports healthy status"
              break
            fi
            
            # Manual endpoint checks as fallback
            if check_endpoint "/health/ready" 3; then
              echo "✅ Ready endpoint responding"
              
              # Verify other endpoints work too
              if check_endpoint "/health" 3; then
                echo "✅ Main health endpoint responding"
              else
                echo "⚠️ Main health endpoint not responding, but ready endpoint works"
              fi
              break
            fi
            
            # Show logs every 5 attempts for debugging
            if [ $((i % 5)) -eq 0 ]; then
              echo "📋 Recent container logs (last 10 lines):"
              docker logs --tail 10 promptlab 2>&1 || echo "No logs available"
            fi
            
            sleep 2
          done

          # Final verification
          if ! check_endpoint "/health/ready" 5; then
            echo "❌ Health check failed after 60 seconds"
            echo "📋 Full container logs:"
            docker logs promptlab 2>&1 || echo "No logs available"
            echo "🔍 Container inspect:"
            docker inspect promptlab || echo "Container inspect failed"
            exit 1
          fi

          echo "✅ All health checks passed!"

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests..."

          # Test basic API functionality
          echo "Testing basic API endpoints..."

          # Test health endpoints
          curl -f -X GET "http://localhost:3000/health" || exit 1
          curl -f -X GET "http://localhost:3000/health/ready" || exit 1

          # Test job listing (should return empty array initially)
          response=$(curl -f -X GET "http://localhost:3000/jobs" 2>/dev/null)
          if echo "$response" | grep -q '"jobs":\[\]'; then
            echo "✅ Jobs endpoint working correctly"
          else
            echo "❌ Jobs endpoint returned unexpected response: $response"
            exit 1
          fi

          echo "✅ All smoke tests passed!"

      - name: Cleanup containers
        if: always()
        run: |
          echo "🧹 Cleaning up containers..."
          docker ps -a --filter "name=promptlab" --format "{{.ID}}" | xargs -r docker rm -f
          echo "✅ Cleanup completed"
