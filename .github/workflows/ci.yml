name: CI

on:
  push:
  pull_request:

jobs:
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ JS / TS quality gate â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install native build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-dev
          # Install additional tools that might be needed for native compilation
          sudo apt-get install -y pkg-config libsqlite3-dev

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
        env:
          npm_config_build_from_source: true
          SQLITE3_FORCE_COMPILE: true

      - name: Validate datasets
        run: pnpm lint:data

      - name: Build
        run: pnpm build

      - name: Lint
        run: pnpm -r lint

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Check for unused dependencies
        run: pnpm deps:check

      - name: Test
        run: pnpm -r test
        env:
          NODE_ENV: test

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Docker smoke test â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: promptlab:test
          load: true

      - name: Start container
        run: docker run -d --name promptlab -p 3000:3000 promptlab:test

      - name: Wait for API /health
        run: |
          for i in {1..20}; do
            if ! docker ps --filter name=promptlab --format '{{.Status}}' | grep -q 'Up'; then
              echo "Container exited early ðŸ˜­"
              docker logs promptlab || true
              exit 1
            fi
            if curl -sf http://localhost:3000/health > /dev/null ; then
              echo "API is up ðŸŽ‰"
              exit 0
            fi
            echo "API not up yetâ€¦ retrying ($i/20)"
            sleep 2
          done
          echo "Gave up waiting for API"
          docker logs promptlab || true
          exit 1

      - name: Stop container
        if: always()
        run: docker rm -f promptlab || true
