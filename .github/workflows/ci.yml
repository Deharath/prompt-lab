name: CI

on:
  push:
  pull_request:

jobs:
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ JS / TS quality gate â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Set up pnpm 10
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.3 # keep in sync with local
          run_install: false # we run install below

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.local/share/pnpm/store/v3
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Validate datasets
        run: pnpm lint:data

      - name: Lint
        run: pnpm -r lint
      - name: Type-check
        run: pnpm -r tsc
      - run: pnpm test
      - run: pnpm test:e2e

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Docker smoke test â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Buildx driver (required for docker/build-push-action)
      - uses: docker/setup-buildx-action@v3

      # Build image **and load it** into the runnerâ€™s Docker daemon
      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: promptlab:test
          load: true # makes the image available to `docker run`

      # Start the container (donâ€™t use --rm so we can read logs on failure)
      - name: Start container
        run: docker run -d --name promptlab -p 3000:3000 promptlab:test

      # Wait (max 40 s) for the health endpoint; print logs if it dies/timeout
      - name: Wait for API /health
        run: |
          for i in {1..20}; do
            # Has the container quit already?
            if ! docker ps --filter name=promptlab --format '{{.Status}}' | grep -q 'Up'; then
              echo "Container exited early ðŸ˜­"
              docker logs promptlab || true
              exit 1
            fi
            # Probe the health endpoint
            if curl -sf http://localhost:3000/health > /dev/null ; then
              echo "API is up ðŸŽ‰"
              exit 0
            fi
            echo "API not up yetâ€¦ retrying ($i/20)"
            sleep 2
          done
          echo "Gave up waiting for API"
          docker logs promptlab || true
          exit 1

      # Always clean up
      - name: Stop container
        if: always()
        run: docker rm -f promptlab || true
