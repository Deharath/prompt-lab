name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.x'
  PNPM_VERSION: '10'

jobs:
  # Single job to minimize runner usage and costs
  ci:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Run TypeScript type checking
        run: pnpm tsc

      - name: Run linting
        run: pnpm lint

      - name: Run tests
        run: pnpm test
        env:
          NODE_ENV: test
          OPENAI_API_KEY: dummy-key-for-ci
          GEMINI_API_KEY: dummy-key-for-ci

  # Simplified Docker test - only on main branch pushes
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t promptlab:test .

      - name: Test Docker image
        run: |
          # Start container
          docker run -d --name test-container -p 3000:3000 \
            -e NODE_ENV=test \
            -e OPENAI_API_KEY=dummy-key-for-ci \
            -e GEMINI_API_KEY=dummy-key-for-ci \
            promptlab:test

          # Wait for container to start
          sleep 10

          # Simple health check
          for i in {1..12}; do
            if docker logs test-container 2>&1 | grep -q "API server started\|Health endpoints available"; then
              echo "✅ Container started successfully"
              docker rm -f test-container
              exit 0
            fi
            echo "Waiting for container to start... ($i/12)"
            sleep 5
          done

          echo "❌ Container failed to start properly"
          echo "Container logs:"
          docker logs test-container
          docker rm -f test-container
          exit 1
