# .github/workflows/reusable-docker-smoke-test.yml
name: Reusable Docker Smoke Test

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      labels:
        required: true
        type: string

jobs:
  smoke-test:
    runs-on: ${{ fromJson(inputs.labels) }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      # == Robust Container Cleanup ==
      - name: Clean up any existing container (Windows)
        if: inputs.os == 'windows'
        run: |
          $containers = docker ps -a --filter "name=promptlab" --format "{{.ID}}"
          if ($containers) {
            Write-Output "Removing existing containers: $containers"
            docker rm -f $containers
          } else {
            Write-Output "No existing containers to remove"
          }

      - name: Clean up any existing container (Linux)
        if: inputs.os == 'linux'
        run: |
          containers=$(docker ps -a --filter "name=promptlab" --format "{{.ID}}")
          if [ ! -z "$containers" ]; then
            echo "Removing existing containers: $containers"
            docker rm -f $containers
          else
            echo "No existing containers to remove"
          fi

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: promptlab:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start container
        run: docker run -d --name promptlab -p 3000:3000 -e OPENAI_API_KEY=dummy-key-for-ci -e NODE_ENV=test promptlab:test

      # == OS-Specific Health Check Scripts ==
      - name: Wait for API /health (Windows)
        if: inputs.os == 'windows'
        run: |
          for ($i = 1; $i -le 20; $i++) {
            $containerStatus = docker ps --filter name=promptlab --format '{{.Status}}'
            if (-not ($containerStatus -like '*Up*')) {
              Write-Output "Container exited early ðŸ˜­"
              docker logs promptlab
              exit 1
            }
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:3000/health/ready" -UseBasicParsing -TimeoutSec 5
              if ($response.StatusCode -eq 200) {
                Write-Output "API is up ðŸŽ‰"
                exit 0
              }
            } catch {
              Write-Output "API not up yetâ€¦ retrying ($i/20)"
            }
            Start-Sleep -Seconds 2
          }
          Write-Output "Gave up waiting for API"
          docker logs promptlab
          exit 1

      - name: Wait for API /health (Linux)
        if: inputs.os == 'linux'
        run: |
          for i in {1..20}; do
            if ! docker ps --filter name=promptlab --format '{{.Status}}' | grep -q 'Up'; then
              echo "Container exited early ðŸ˜­"
              docker logs promptlab || true
              exit 1
            fi
            if curl -sf http://localhost:3000/health/ready > /dev/null ; then
              echo "API is up ðŸŽ‰"
              exit 0
            fi
            echo "API not up yetâ€¦ retrying ($i/20)"
            sleep 2
          done
          echo "Gave up waiting for API"
          docker logs promptlab || true
          exit 1

      - name: Stop container (Windows)
        if: always() && inputs.os == 'windows'
        run: |
          $containers = docker ps -a --filter "name=promptlab" --format "{{.ID}}"
          if ($containers) {
            Write-Output "Cleaning up containers: $containers"
            docker rm -f $containers
          } else {
            Write-Output "No containers to clean up"
          }

      - name: Stop container (Linux)
        if: always() && inputs.os == 'linux'
        run: |
          containers=$(docker ps -a --filter "name=promptlab" --format "{{.ID}}")
          if [ ! -z "$containers" ]; then
            echo "Cleaning up containers: $containers"
            docker rm -f $containers
          else
            echo "No containers to clean up"
          fi
